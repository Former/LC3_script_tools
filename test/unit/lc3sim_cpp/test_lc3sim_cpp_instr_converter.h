#pragma once

TEST(BASE_NAME, BR1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_BR(1, 10, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_BR(1, 10, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, BR2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_BR(2, -5, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_BR(2, -5, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, BR3)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_BR(0, 0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_BR(0, 0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, LD1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_LD(3, 11, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_LD(3, 11, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, LD2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_LD(4, -6, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_LD(4, -6, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, ST1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_ST(6, 12, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_ST(6, 12, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, ST2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_ST(7, -7, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_ST(7, -7, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, LDI1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_LDI(3, 11, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_LDI(3, 11, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, LDI2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_LDI(4, -6, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_LDI(4, -6, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, STI1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_STI(6, 12, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_STI(6, 12, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, STI2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_STI(7, -7, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_STI(7, -7, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, LEA1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_LEA(6, 12, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_LEA(6, 12, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, LEA2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_LEA(7, -7, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_LEA(7, -7, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}


TEST(BASE_NAME, ADD_I1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_ADD_I(1, 2, 10, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_ADD_I(1, 2, 10, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, ADD_I2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_ADD_I(2, 3, -5, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_ADD_I(2, 3, -5, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, ADD_I3)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_ADD_I(0, 0, 0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_ADD_I(0, 0, 0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, ADD_R1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_ADD_R(1, 2, 5, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_ADD_R(1, 2, 5, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, ADD_R2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_ADD_R(2, 3, 5, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_ADD_R(2, 3, 5, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, AND_I1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_AND_I(1, 2, 10, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_AND_I(1, 2, 10, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, AND_I2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_AND_I(2, 3, -5, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_AND_I(2, 3, -5, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, AND_R1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_AND_R(1, 2, 5, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_AND_R(1, 2, 5, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, AND_R2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_AND_R(2, 3, 5, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_AND_R(2, 3, 5, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, AND_R3)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_AND_R(0, 0, 0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_AND_R(0, 0, 0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}


TEST(BASE_NAME, JSR_I1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_JSR_I(10, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_JSR_I(10, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, JSR_I2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_JSR_I(-15, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_JSR_I(-15, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, JSR_I3)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_JSR_I(0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_JSR_I(0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, JSR_R1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_JSR_R(5, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_TO);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_JSR_R(5, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, JSR_R2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_JSR_R(0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_TO);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_JSR_R(0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}


TEST(BASE_NAME, LDR1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_LDR(1, 3, 10, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_LDR(1, 3, 10, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, LDR2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_LDR(2, 4, -5, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_LDR(2, 4, -5, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, LDR3)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_LDR(0, 0, 0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_LDR(0, 0, 0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, STR1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_STR(1, 3, 10, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_STR(1, 3, 10, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, STR2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_STR(2, 4, -5, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_STR(2, 4, -5, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, STR3)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_STR(0, 0, 0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_STR(0, 0, 0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}


TEST(BASE_NAME, NOT1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_NOT(2, 4, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_NOT(2, 4, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, NOT2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_NOT(0, 0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_NOT(0, 0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, JMP1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_JMP(4, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_JMP(4, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, JMP2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_JMP(0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_JMP(0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}


TEST(BASE_NAME, RTI1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_RTI(1, 3, 10, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_RTI(1, 3, 10, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, RTI2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_RTI(2, 4, -5, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_RTI(2, 4, -5, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, RTI3)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_RTI(0, 0, 0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_RTI(0, 0, 0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}


TEST(BASE_NAME, RES1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_RES(6, 12, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_RES(6, 12, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, RES2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_RES(0, 0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM, REG_NUM_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_RES(0, 0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO, REG_NUM_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, TRAP1)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_TRAP(0x24, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_TRAP(0x24, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}

TEST(BASE_NAME, TRAP2)
{
    REG_TYPE_FROM i_from = LC3_MAKE_INSTR_TRAP(0, INSTR_BIT_COUNT_FROM, OPER_BIT_COUNT_FROM);
    REG_TYPE_TO i_to = LC3_MAKE_INSTR_TRAP(0, INSTR_BIT_COUNT_TO, OPER_BIT_COUNT_TO);

    REG_TYPE_TO i_convert = TEST_INSTR_CONVERT(i_from);
    EXPECT_EQ(i_convert, i_to);
}
